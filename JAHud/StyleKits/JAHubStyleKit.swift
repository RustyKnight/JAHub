//
//  JAHubStyleKit.swift
//  JAHub
//
//  Created by Shane Whitehead on 7/9/18.
//  Copyright Â© 2018 KaiZen Enterprises. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class JAHubStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawActivityIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), rotationProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)


        //// Color Declarations
        var fillColorRedComponent: CGFloat = 1
        var fillColorGreenComponent: CGFloat = 1
        var fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let darker01 = UIColor(red: (fillColorRedComponent * 0.83), green: (fillColorGreenComponent * 0.83), blue: (fillColorBlueComponent * 0.83), alpha: (fillColor.cgColor.alpha * 0.83 + 0.17))
        let darkerAlpha01 = darker01.withAlphaComponent(0.83)
        let dark02 = UIColor(red: (fillColorRedComponent * 0.67), green: (fillColorGreenComponent * 0.67), blue: (fillColorBlueComponent * 0.67), alpha: (fillColor.cgColor.alpha * 0.67 + 0.33))
        let darkerAlpha02 = dark02.withAlphaComponent(0.67)
        let dark03 = UIColor(red: (fillColorRedComponent * 0.5), green: (fillColorGreenComponent * 0.5), blue: (fillColorBlueComponent * 0.5), alpha: (fillColor.cgColor.alpha * 0.5 + 0.5))
        let darkAlpha03 = dark03.withAlphaComponent(0.5)

        //// Variable Declarations
        let rotationAngle: CGFloat = 360.0 / 12.0 * round(12 * -rotationProgress)

        //// SpinningBladesOfDoom
        context.saveGState()
        context.translateBy(x: 54, y: 54)
        context.rotate(by: -rotationAngle * CGFloat.pi/180)



        //// Blade01 Drawing
        let blade01Path = UIBezierPath()
        blade01Path.move(to: CGPoint(x: 0, y: -52))
        blade01Path.addLine(to: CGPoint(x: 0, y: -52))
        blade01Path.addLine(to: CGPoint(x: 0, y: -52))
        blade01Path.addLine(to: CGPoint(x: 0.25, y: -52))
        blade01Path.addCurve(to: CGPoint(x: 4.63, y: -48.94), controlPoint1: CGPoint(x: 2.21, y: -52), controlPoint2: CGPoint(x: 3.96, y: -50.78))
        blade01Path.addCurve(to: CGPoint(x: 5, y: -44.45), controlPoint1: CGPoint(x: 5, y: -47.75), controlPoint2: CGPoint(x: 5, y: -46.65))
        blade01Path.addLine(to: CGPoint(x: 5, y: -31.64))
        blade01Path.addCurve(to: CGPoint(x: 4.67, y: -27.26), controlPoint1: CGPoint(x: 5, y: -29.35), controlPoint2: CGPoint(x: 5, y: -28.25))
        blade01Path.addLine(to: CGPoint(x: 4.63, y: -27.06))
        blade01Path.addCurve(to: CGPoint(x: 0.25, y: -24), controlPoint1: CGPoint(x: 3.96, y: -25.22), controlPoint2: CGPoint(x: 2.21, y: -24))
        blade01Path.addCurve(to: CGPoint(x: 0, y: -24), controlPoint1: CGPoint(x: 0, y: -24), controlPoint2: CGPoint(x: 0, y: -24))
        blade01Path.addLine(to: CGPoint(x: 0, y: -24))
        blade01Path.addLine(to: CGPoint(x: 0, y: -24))
        blade01Path.addLine(to: CGPoint(x: -0.25, y: -24))
        blade01Path.addCurve(to: CGPoint(x: -4.63, y: -27.06), controlPoint1: CGPoint(x: -2.21, y: -24), controlPoint2: CGPoint(x: -3.96, y: -25.22))
        blade01Path.addCurve(to: CGPoint(x: -5, y: -31.55), controlPoint1: CGPoint(x: -5, y: -28.25), controlPoint2: CGPoint(x: -5, y: -29.35))
        blade01Path.addLine(to: CGPoint(x: -5, y: -31.64))
        blade01Path.addCurve(to: CGPoint(x: -4.67, y: -48.74), controlPoint1: CGPoint(x: -5, y: -46.65), controlPoint2: CGPoint(x: -5, y: -47.75))
        blade01Path.addLine(to: CGPoint(x: -4.63, y: -48.94))
        blade01Path.addCurve(to: CGPoint(x: -0.25, y: -52), controlPoint1: CGPoint(x: -3.96, y: -50.78), controlPoint2: CGPoint(x: -2.21, y: -52))
        blade01Path.addCurve(to: CGPoint(x: 0, y: -52), controlPoint1: CGPoint(x: 0, y: -52), controlPoint2: CGPoint(x: 0, y: -52))
        blade01Path.addLine(to: CGPoint(x: 0, y: -52))
        blade01Path.close()
        fillColor.setFill()
        blade01Path.fill()


        //// Blade02 Drawing
        let blade02Path = UIBezierPath()
        blade02Path.move(to: CGPoint(x: -52, y: 0))
        blade02Path.addLine(to: CGPoint(x: -52, y: 0))
        blade02Path.addLine(to: CGPoint(x: -52, y: 0))
        blade02Path.addLine(to: CGPoint(x: -52, y: -0.25))
        blade02Path.addCurve(to: CGPoint(x: -48.94, y: -4.63), controlPoint1: CGPoint(x: -52, y: -2.21), controlPoint2: CGPoint(x: -50.78, y: -3.96))
        blade02Path.addCurve(to: CGPoint(x: -44.45, y: -5), controlPoint1: CGPoint(x: -47.75, y: -5), controlPoint2: CGPoint(x: -46.65, y: -5))
        blade02Path.addLine(to: CGPoint(x: -31.64, y: -5))
        blade02Path.addCurve(to: CGPoint(x: -27.26, y: -4.67), controlPoint1: CGPoint(x: -29.35, y: -5), controlPoint2: CGPoint(x: -28.25, y: -5))
        blade02Path.addLine(to: CGPoint(x: -27.06, y: -4.63))
        blade02Path.addCurve(to: CGPoint(x: -24, y: -0.25), controlPoint1: CGPoint(x: -25.22, y: -3.96), controlPoint2: CGPoint(x: -24, y: -2.21))
        blade02Path.addCurve(to: CGPoint(x: -24, y: 0), controlPoint1: CGPoint(x: -24, y: -0), controlPoint2: CGPoint(x: -24, y: 0))
        blade02Path.addLine(to: CGPoint(x: -24, y: 0))
        blade02Path.addLine(to: CGPoint(x: -24, y: 0))
        blade02Path.addLine(to: CGPoint(x: -24, y: 0.25))
        blade02Path.addCurve(to: CGPoint(x: -27.06, y: 4.63), controlPoint1: CGPoint(x: -24, y: 2.21), controlPoint2: CGPoint(x: -25.22, y: 3.96))
        blade02Path.addCurve(to: CGPoint(x: -31.55, y: 5), controlPoint1: CGPoint(x: -28.25, y: 5), controlPoint2: CGPoint(x: -29.35, y: 5))
        blade02Path.addLine(to: CGPoint(x: -31.64, y: 5))
        blade02Path.addCurve(to: CGPoint(x: -48.74, y: 4.67), controlPoint1: CGPoint(x: -46.65, y: 5), controlPoint2: CGPoint(x: -47.75, y: 5))
        blade02Path.addLine(to: CGPoint(x: -48.94, y: 4.63))
        blade02Path.addCurve(to: CGPoint(x: -52, y: 0.25), controlPoint1: CGPoint(x: -50.78, y: 3.96), controlPoint2: CGPoint(x: -52, y: 2.21))
        blade02Path.addCurve(to: CGPoint(x: -52, y: 0), controlPoint1: CGPoint(x: -52, y: 0), controlPoint2: CGPoint(x: -52, y: 0))
        blade02Path.addLine(to: CGPoint(x: -52, y: 0))
        blade02Path.close()
        darkAlpha03.setFill()
        blade02Path.fill()


        //// Blade03 Drawing
        let blade03Path = UIBezierPath()
        blade03Path.move(to: CGPoint(x: -26, y: -45.03))
        blade03Path.addLine(to: CGPoint(x: -26, y: -45.03))
        blade03Path.addLine(to: CGPoint(x: -26, y: -45.03))
        blade03Path.addLine(to: CGPoint(x: -25.78, y: -45.16))
        blade03Path.addCurve(to: CGPoint(x: -20.46, y: -44.69), controlPoint1: CGPoint(x: -24.09, y: -46.14), controlPoint2: CGPoint(x: -21.96, y: -45.95))
        blade03Path.addCurve(to: CGPoint(x: -17.9, y: -41), controlPoint1: CGPoint(x: -19.55, y: -43.85), controlPoint2: CGPoint(x: -19, y: -42.9))
        blade03Path.addLine(to: CGPoint(x: -11.49, y: -29.9))
        blade03Path.addCurve(to: CGPoint(x: -9.58, y: -25.94), controlPoint1: CGPoint(x: -10.34, y: -27.92), controlPoint2: CGPoint(x: -9.79, y: -26.96))
        blade03Path.addLine(to: CGPoint(x: -9.53, y: -25.75))
        blade03Path.addCurve(to: CGPoint(x: -11.78, y: -20.91), controlPoint1: CGPoint(x: -9.19, y: -23.82), controlPoint2: CGPoint(x: -10.09, y: -21.89))
        blade03Path.addCurve(to: CGPoint(x: -12, y: -20.78), controlPoint1: CGPoint(x: -12, y: -20.78), controlPoint2: CGPoint(x: -12, y: -20.78))
        blade03Path.addLine(to: CGPoint(x: -12, y: -20.78))
        blade03Path.addLine(to: CGPoint(x: -12, y: -20.78))
        blade03Path.addLine(to: CGPoint(x: -12.22, y: -20.66))
        blade03Path.addCurve(to: CGPoint(x: -17.54, y: -21.13), controlPoint1: CGPoint(x: -13.91, y: -19.68), controlPoint2: CGPoint(x: -16.04, y: -19.87))
        blade03Path.addCurve(to: CGPoint(x: -20.1, y: -24.82), controlPoint1: CGPoint(x: -18.45, y: -21.96), controlPoint2: CGPoint(x: -19, y: -22.92))
        blade03Path.addLine(to: CGPoint(x: -20.15, y: -24.9))
        blade03Path.addCurve(to: CGPoint(x: -28.42, y: -39.88), controlPoint1: CGPoint(x: -27.66, y: -37.9), controlPoint2: CGPoint(x: -28.21, y: -38.85))
        blade03Path.addLine(to: CGPoint(x: -28.47, y: -40.07))
        blade03Path.addCurve(to: CGPoint(x: -26.22, y: -44.91), controlPoint1: CGPoint(x: -28.81, y: -42), controlPoint2: CGPoint(x: -27.91, y: -43.93))
        blade03Path.addCurve(to: CGPoint(x: -26, y: -45.03), controlPoint1: CGPoint(x: -26, y: -45.03), controlPoint2: CGPoint(x: -26, y: -45.03))
        blade03Path.addLine(to: CGPoint(x: -26, y: -45.03))
        blade03Path.close()
        darkerAlpha01.setFill()
        blade03Path.fill()


        //// Blade04 Drawing
        let blade04Path = UIBezierPath()
        blade04Path.move(to: CGPoint(x: -45.03, y: -26))
        blade04Path.addLine(to: CGPoint(x: -45.03, y: -26))
        blade04Path.addLine(to: CGPoint(x: -45.03, y: -26))
        blade04Path.addLine(to: CGPoint(x: -44.91, y: -26.22))
        blade04Path.addCurve(to: CGPoint(x: -40.07, y: -28.47), controlPoint1: CGPoint(x: -43.93, y: -27.91), controlPoint2: CGPoint(x: -42, y: -28.81))
        blade04Path.addCurve(to: CGPoint(x: -36, y: -26.56), controlPoint1: CGPoint(x: -38.85, y: -28.21), controlPoint2: CGPoint(x: -37.9, y: -27.66))
        blade04Path.addLine(to: CGPoint(x: -24.9, y: -20.15))
        blade04Path.addCurve(to: CGPoint(x: -21.27, y: -17.67), controlPoint1: CGPoint(x: -22.92, y: -19), controlPoint2: CGPoint(x: -21.96, y: -18.45))
        blade04Path.addLine(to: CGPoint(x: -21.13, y: -17.54))
        blade04Path.addCurve(to: CGPoint(x: -20.66, y: -12.22), controlPoint1: CGPoint(x: -19.87, y: -16.04), controlPoint2: CGPoint(x: -19.68, y: -13.91))
        blade04Path.addCurve(to: CGPoint(x: -20.78, y: -12), controlPoint1: CGPoint(x: -20.78, y: -12), controlPoint2: CGPoint(x: -20.78, y: -12))
        blade04Path.addLine(to: CGPoint(x: -20.78, y: -12))
        blade04Path.addLine(to: CGPoint(x: -20.78, y: -12))
        blade04Path.addLine(to: CGPoint(x: -20.91, y: -11.78))
        blade04Path.addCurve(to: CGPoint(x: -25.75, y: -9.53), controlPoint1: CGPoint(x: -21.89, y: -10.09), controlPoint2: CGPoint(x: -23.82, y: -9.19))
        blade04Path.addCurve(to: CGPoint(x: -29.82, y: -11.44), controlPoint1: CGPoint(x: -26.96, y: -9.79), controlPoint2: CGPoint(x: -27.92, y: -10.34))
        blade04Path.addLine(to: CGPoint(x: -29.9, y: -11.49))
        blade04Path.addCurve(to: CGPoint(x: -44.55, y: -20.33), controlPoint1: CGPoint(x: -42.9, y: -19), controlPoint2: CGPoint(x: -43.85, y: -19.55))
        blade04Path.addLine(to: CGPoint(x: -44.69, y: -20.46))
        blade04Path.addCurve(to: CGPoint(x: -45.16, y: -25.78), controlPoint1: CGPoint(x: -45.95, y: -21.96), controlPoint2: CGPoint(x: -46.14, y: -24.09))
        blade04Path.addCurve(to: CGPoint(x: -45.03, y: -26), controlPoint1: CGPoint(x: -45.03, y: -26), controlPoint2: CGPoint(x: -45.03, y: -26))
        blade04Path.addLine(to: CGPoint(x: -45.03, y: -26))
        blade04Path.close()
        darkerAlpha02.setFill()
        blade04Path.fill()


        //// Blade05 Drawing
        let blade05Path = UIBezierPath()
        blade05Path.move(to: CGPoint(x: -45.03, y: 26))
        blade05Path.addLine(to: CGPoint(x: -45.03, y: 26))
        blade05Path.addLine(to: CGPoint(x: -45.03, y: 26))
        blade05Path.addLine(to: CGPoint(x: -45.16, y: 25.78))
        blade05Path.addCurve(to: CGPoint(x: -44.69, y: 20.46), controlPoint1: CGPoint(x: -46.14, y: 24.09), controlPoint2: CGPoint(x: -45.95, y: 21.96))
        blade05Path.addCurve(to: CGPoint(x: -41, y: 17.9), controlPoint1: CGPoint(x: -43.85, y: 19.55), controlPoint2: CGPoint(x: -42.9, y: 19))
        blade05Path.addLine(to: CGPoint(x: -29.9, y: 11.49))
        blade05Path.addCurve(to: CGPoint(x: -25.94, y: 9.58), controlPoint1: CGPoint(x: -27.92, y: 10.34), controlPoint2: CGPoint(x: -26.96, y: 9.79))
        blade05Path.addLine(to: CGPoint(x: -25.75, y: 9.53))
        blade05Path.addCurve(to: CGPoint(x: -20.91, y: 11.78), controlPoint1: CGPoint(x: -23.82, y: 9.19), controlPoint2: CGPoint(x: -21.89, y: 10.09))
        blade05Path.addCurve(to: CGPoint(x: -20.78, y: 12), controlPoint1: CGPoint(x: -20.78, y: 12), controlPoint2: CGPoint(x: -20.78, y: 12))
        blade05Path.addLine(to: CGPoint(x: -20.78, y: 12))
        blade05Path.addLine(to: CGPoint(x: -20.78, y: 12))
        blade05Path.addLine(to: CGPoint(x: -20.66, y: 12.22))
        blade05Path.addCurve(to: CGPoint(x: -21.13, y: 17.54), controlPoint1: CGPoint(x: -19.68, y: 13.91), controlPoint2: CGPoint(x: -19.87, y: 16.04))
        blade05Path.addCurve(to: CGPoint(x: -24.82, y: 20.1), controlPoint1: CGPoint(x: -21.96, y: 18.45), controlPoint2: CGPoint(x: -22.92, y: 19))
        blade05Path.addLine(to: CGPoint(x: -24.9, y: 20.15))
        blade05Path.addCurve(to: CGPoint(x: -39.88, y: 28.42), controlPoint1: CGPoint(x: -37.9, y: 27.66), controlPoint2: CGPoint(x: -38.85, y: 28.21))
        blade05Path.addLine(to: CGPoint(x: -40.07, y: 28.47))
        blade05Path.addCurve(to: CGPoint(x: -44.91, y: 26.22), controlPoint1: CGPoint(x: -42, y: 28.81), controlPoint2: CGPoint(x: -43.93, y: 27.91))
        blade05Path.addCurve(to: CGPoint(x: -45.03, y: 26), controlPoint1: CGPoint(x: -45.03, y: 26), controlPoint2: CGPoint(x: -45.03, y: 26))
        blade05Path.addLine(to: CGPoint(x: -45.03, y: 26))
        blade05Path.close()
        darkAlpha03.setFill()
        blade05Path.fill()


        //// Blade06 Drawing
        let blade06Path = UIBezierPath()
        blade06Path.move(to: CGPoint(x: -26, y: 45.03))
        blade06Path.addLine(to: CGPoint(x: -26, y: 45.03))
        blade06Path.addLine(to: CGPoint(x: -26, y: 45.03))
        blade06Path.addLine(to: CGPoint(x: -26.22, y: 44.91))
        blade06Path.addCurve(to: CGPoint(x: -28.47, y: 40.07), controlPoint1: CGPoint(x: -27.91, y: 43.93), controlPoint2: CGPoint(x: -28.81, y: 42))
        blade06Path.addCurve(to: CGPoint(x: -26.56, y: 36), controlPoint1: CGPoint(x: -28.21, y: 38.85), controlPoint2: CGPoint(x: -27.66, y: 37.9))
        blade06Path.addLine(to: CGPoint(x: -20.15, y: 24.9))
        blade06Path.addCurve(to: CGPoint(x: -17.67, y: 21.27), controlPoint1: CGPoint(x: -19, y: 22.92), controlPoint2: CGPoint(x: -18.45, y: 21.96))
        blade06Path.addLine(to: CGPoint(x: -17.54, y: 21.13))
        blade06Path.addCurve(to: CGPoint(x: -12.22, y: 20.66), controlPoint1: CGPoint(x: -16.04, y: 19.87), controlPoint2: CGPoint(x: -13.91, y: 19.68))
        blade06Path.addCurve(to: CGPoint(x: -12, y: 20.78), controlPoint1: CGPoint(x: -12, y: 20.78), controlPoint2: CGPoint(x: -12, y: 20.78))
        blade06Path.addLine(to: CGPoint(x: -12, y: 20.78))
        blade06Path.addLine(to: CGPoint(x: -12, y: 20.78))
        blade06Path.addLine(to: CGPoint(x: -11.78, y: 20.91))
        blade06Path.addCurve(to: CGPoint(x: -9.53, y: 25.75), controlPoint1: CGPoint(x: -10.09, y: 21.89), controlPoint2: CGPoint(x: -9.19, y: 23.82))
        blade06Path.addCurve(to: CGPoint(x: -11.44, y: 29.82), controlPoint1: CGPoint(x: -9.79, y: 26.96), controlPoint2: CGPoint(x: -10.34, y: 27.92))
        blade06Path.addLine(to: CGPoint(x: -11.49, y: 29.9))
        blade06Path.addCurve(to: CGPoint(x: -20.33, y: 44.55), controlPoint1: CGPoint(x: -19, y: 42.9), controlPoint2: CGPoint(x: -19.55, y: 43.85))
        blade06Path.addLine(to: CGPoint(x: -20.46, y: 44.69))
        blade06Path.addCurve(to: CGPoint(x: -25.78, y: 45.16), controlPoint1: CGPoint(x: -21.96, y: 45.95), controlPoint2: CGPoint(x: -24.09, y: 46.14))
        blade06Path.addCurve(to: CGPoint(x: -26, y: 45.03), controlPoint1: CGPoint(x: -26, y: 45.03), controlPoint2: CGPoint(x: -26, y: 45.03))
        blade06Path.addLine(to: CGPoint(x: -26, y: 45.03))
        blade06Path.close()
        darkAlpha03.setFill()
        blade06Path.fill()


        //// Blade07 Drawing
        let blade07Path = UIBezierPath()
        blade07Path.move(to: CGPoint(x: -0, y: 52))
        blade07Path.addLine(to: CGPoint(x: -0, y: 52))
        blade07Path.addLine(to: CGPoint(x: -0, y: 52))
        blade07Path.addLine(to: CGPoint(x: -0.25, y: 52))
        blade07Path.addCurve(to: CGPoint(x: -4.63, y: 48.94), controlPoint1: CGPoint(x: -2.21, y: 52), controlPoint2: CGPoint(x: -3.96, y: 50.78))
        blade07Path.addCurve(to: CGPoint(x: -5, y: 44.45), controlPoint1: CGPoint(x: -5, y: 47.75), controlPoint2: CGPoint(x: -5, y: 46.65))
        blade07Path.addLine(to: CGPoint(x: -5, y: 31.64))
        blade07Path.addCurve(to: CGPoint(x: -4.67, y: 27.26), controlPoint1: CGPoint(x: -5, y: 29.35), controlPoint2: CGPoint(x: -5, y: 28.25))
        blade07Path.addLine(to: CGPoint(x: -4.63, y: 27.06))
        blade07Path.addCurve(to: CGPoint(x: -0.25, y: 24), controlPoint1: CGPoint(x: -3.96, y: 25.22), controlPoint2: CGPoint(x: -2.21, y: 24))
        blade07Path.addCurve(to: CGPoint(x: 0, y: 24), controlPoint1: CGPoint(x: 0, y: 24), controlPoint2: CGPoint(x: 0, y: 24))
        blade07Path.addLine(to: CGPoint(x: 0, y: 24))
        blade07Path.addLine(to: CGPoint(x: 0, y: 24))
        blade07Path.addLine(to: CGPoint(x: 0.25, y: 24))
        blade07Path.addCurve(to: CGPoint(x: 4.63, y: 27.06), controlPoint1: CGPoint(x: 2.21, y: 24), controlPoint2: CGPoint(x: 3.96, y: 25.22))
        blade07Path.addCurve(to: CGPoint(x: 5, y: 31.55), controlPoint1: CGPoint(x: 5, y: 28.25), controlPoint2: CGPoint(x: 5, y: 29.35))
        blade07Path.addLine(to: CGPoint(x: 5, y: 31.64))
        blade07Path.addCurve(to: CGPoint(x: 4.67, y: 48.74), controlPoint1: CGPoint(x: 5, y: 46.65), controlPoint2: CGPoint(x: 5, y: 47.75))
        blade07Path.addLine(to: CGPoint(x: 4.63, y: 48.94))
        blade07Path.addCurve(to: CGPoint(x: 0.25, y: 52), controlPoint1: CGPoint(x: 3.96, y: 50.78), controlPoint2: CGPoint(x: 2.21, y: 52))
        blade07Path.addCurve(to: CGPoint(x: -0, y: 52), controlPoint1: CGPoint(x: -0, y: 52), controlPoint2: CGPoint(x: -0, y: 52))
        blade07Path.addLine(to: CGPoint(x: -0, y: 52))
        blade07Path.close()
        darkAlpha03.setFill()
        blade07Path.fill()


        //// Blade08 Drawing
        let blade08Path = UIBezierPath()
        blade08Path.move(to: CGPoint(x: 26, y: 45.03))
        blade08Path.addLine(to: CGPoint(x: 26, y: 45.03))
        blade08Path.addLine(to: CGPoint(x: 26, y: 45.03))
        blade08Path.addLine(to: CGPoint(x: 25.78, y: 45.16))
        blade08Path.addCurve(to: CGPoint(x: 20.46, y: 44.69), controlPoint1: CGPoint(x: 24.09, y: 46.14), controlPoint2: CGPoint(x: 21.96, y: 45.95))
        blade08Path.addCurve(to: CGPoint(x: 17.9, y: 41), controlPoint1: CGPoint(x: 19.55, y: 43.85), controlPoint2: CGPoint(x: 19, y: 42.9))
        blade08Path.addLine(to: CGPoint(x: 11.49, y: 29.9))
        blade08Path.addCurve(to: CGPoint(x: 9.58, y: 25.94), controlPoint1: CGPoint(x: 10.34, y: 27.92), controlPoint2: CGPoint(x: 9.79, y: 26.96))
        blade08Path.addLine(to: CGPoint(x: 9.53, y: 25.75))
        blade08Path.addCurve(to: CGPoint(x: 11.78, y: 20.91), controlPoint1: CGPoint(x: 9.19, y: 23.82), controlPoint2: CGPoint(x: 10.09, y: 21.89))
        blade08Path.addCurve(to: CGPoint(x: 12, y: 20.78), controlPoint1: CGPoint(x: 12, y: 20.78), controlPoint2: CGPoint(x: 12, y: 20.78))
        blade08Path.addLine(to: CGPoint(x: 12, y: 20.78))
        blade08Path.addLine(to: CGPoint(x: 12, y: 20.78))
        blade08Path.addLine(to: CGPoint(x: 12.22, y: 20.66))
        blade08Path.addCurve(to: CGPoint(x: 17.54, y: 21.13), controlPoint1: CGPoint(x: 13.91, y: 19.68), controlPoint2: CGPoint(x: 16.04, y: 19.87))
        blade08Path.addCurve(to: CGPoint(x: 20.1, y: 24.82), controlPoint1: CGPoint(x: 18.45, y: 21.96), controlPoint2: CGPoint(x: 19, y: 22.92))
        blade08Path.addLine(to: CGPoint(x: 20.15, y: 24.9))
        blade08Path.addCurve(to: CGPoint(x: 28.42, y: 39.88), controlPoint1: CGPoint(x: 27.66, y: 37.9), controlPoint2: CGPoint(x: 28.21, y: 38.85))
        blade08Path.addLine(to: CGPoint(x: 28.47, y: 40.07))
        blade08Path.addCurve(to: CGPoint(x: 26.22, y: 44.91), controlPoint1: CGPoint(x: 28.81, y: 42), controlPoint2: CGPoint(x: 27.91, y: 43.93))
        blade08Path.addCurve(to: CGPoint(x: 26, y: 45.03), controlPoint1: CGPoint(x: 26, y: 45.03), controlPoint2: CGPoint(x: 26, y: 45.03))
        blade08Path.addLine(to: CGPoint(x: 26, y: 45.03))
        blade08Path.close()
        darkAlpha03.setFill()
        blade08Path.fill()


        //// Blade09 Drawing
        let blade09Path = UIBezierPath()
        blade09Path.move(to: CGPoint(x: 45.03, y: 26))
        blade09Path.addLine(to: CGPoint(x: 45.03, y: 26))
        blade09Path.addLine(to: CGPoint(x: 45.03, y: 26))
        blade09Path.addLine(to: CGPoint(x: 44.91, y: 26.22))
        blade09Path.addCurve(to: CGPoint(x: 40.07, y: 28.47), controlPoint1: CGPoint(x: 43.93, y: 27.91), controlPoint2: CGPoint(x: 42, y: 28.81))
        blade09Path.addCurve(to: CGPoint(x: 36, y: 26.56), controlPoint1: CGPoint(x: 38.85, y: 28.21), controlPoint2: CGPoint(x: 37.9, y: 27.66))
        blade09Path.addLine(to: CGPoint(x: 24.9, y: 20.15))
        blade09Path.addCurve(to: CGPoint(x: 21.27, y: 17.67), controlPoint1: CGPoint(x: 22.92, y: 19), controlPoint2: CGPoint(x: 21.96, y: 18.45))
        blade09Path.addLine(to: CGPoint(x: 21.13, y: 17.54))
        blade09Path.addCurve(to: CGPoint(x: 20.66, y: 12.22), controlPoint1: CGPoint(x: 19.87, y: 16.04), controlPoint2: CGPoint(x: 19.68, y: 13.91))
        blade09Path.addCurve(to: CGPoint(x: 20.78, y: 12), controlPoint1: CGPoint(x: 20.78, y: 12), controlPoint2: CGPoint(x: 20.78, y: 12))
        blade09Path.addLine(to: CGPoint(x: 20.78, y: 12))
        blade09Path.addLine(to: CGPoint(x: 20.78, y: 12))
        blade09Path.addLine(to: CGPoint(x: 20.91, y: 11.78))
        blade09Path.addCurve(to: CGPoint(x: 25.75, y: 9.53), controlPoint1: CGPoint(x: 21.89, y: 10.09), controlPoint2: CGPoint(x: 23.82, y: 9.19))
        blade09Path.addCurve(to: CGPoint(x: 29.82, y: 11.44), controlPoint1: CGPoint(x: 26.96, y: 9.79), controlPoint2: CGPoint(x: 27.92, y: 10.34))
        blade09Path.addLine(to: CGPoint(x: 29.9, y: 11.49))
        blade09Path.addCurve(to: CGPoint(x: 44.55, y: 20.33), controlPoint1: CGPoint(x: 42.9, y: 19), controlPoint2: CGPoint(x: 43.85, y: 19.55))
        blade09Path.addLine(to: CGPoint(x: 44.69, y: 20.46))
        blade09Path.addCurve(to: CGPoint(x: 45.16, y: 25.78), controlPoint1: CGPoint(x: 45.95, y: 21.96), controlPoint2: CGPoint(x: 46.14, y: 24.09))
        blade09Path.addCurve(to: CGPoint(x: 45.03, y: 26), controlPoint1: CGPoint(x: 45.03, y: 26), controlPoint2: CGPoint(x: 45.03, y: 26))
        blade09Path.addLine(to: CGPoint(x: 45.03, y: 26))
        blade09Path.close()
        darkAlpha03.setFill()
        blade09Path.fill()


        //// Blade10 Drawing
        let blade10Path = UIBezierPath()
        blade10Path.move(to: CGPoint(x: 52, y: 0))
        blade10Path.addLine(to: CGPoint(x: 52, y: 0))
        blade10Path.addLine(to: CGPoint(x: 52, y: 0))
        blade10Path.addLine(to: CGPoint(x: 52, y: 0.25))
        blade10Path.addCurve(to: CGPoint(x: 48.94, y: 4.63), controlPoint1: CGPoint(x: 52, y: 2.21), controlPoint2: CGPoint(x: 50.78, y: 3.96))
        blade10Path.addCurve(to: CGPoint(x: 44.45, y: 5), controlPoint1: CGPoint(x: 47.75, y: 5), controlPoint2: CGPoint(x: 46.65, y: 5))
        blade10Path.addLine(to: CGPoint(x: 31.64, y: 5))
        blade10Path.addCurve(to: CGPoint(x: 27.26, y: 4.67), controlPoint1: CGPoint(x: 29.35, y: 5), controlPoint2: CGPoint(x: 28.25, y: 5))
        blade10Path.addLine(to: CGPoint(x: 27.06, y: 4.63))
        blade10Path.addCurve(to: CGPoint(x: 24, y: 0.25), controlPoint1: CGPoint(x: 25.22, y: 3.96), controlPoint2: CGPoint(x: 24, y: 2.21))
        blade10Path.addCurve(to: CGPoint(x: 24, y: 0), controlPoint1: CGPoint(x: 24, y: 0), controlPoint2: CGPoint(x: 24, y: 0))
        blade10Path.addLine(to: CGPoint(x: 24, y: 0))
        blade10Path.addLine(to: CGPoint(x: 24, y: 0))
        blade10Path.addLine(to: CGPoint(x: 24, y: -0.25))
        blade10Path.addCurve(to: CGPoint(x: 27.06, y: -4.63), controlPoint1: CGPoint(x: 24, y: -2.21), controlPoint2: CGPoint(x: 25.22, y: -3.96))
        blade10Path.addCurve(to: CGPoint(x: 31.55, y: -5), controlPoint1: CGPoint(x: 28.25, y: -5), controlPoint2: CGPoint(x: 29.35, y: -5))
        blade10Path.addLine(to: CGPoint(x: 31.64, y: -5))
        blade10Path.addCurve(to: CGPoint(x: 48.74, y: -4.67), controlPoint1: CGPoint(x: 46.65, y: -5), controlPoint2: CGPoint(x: 47.75, y: -5))
        blade10Path.addLine(to: CGPoint(x: 48.94, y: -4.63))
        blade10Path.addCurve(to: CGPoint(x: 52, y: -0.25), controlPoint1: CGPoint(x: 50.78, y: -3.96), controlPoint2: CGPoint(x: 52, y: -2.21))
        blade10Path.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 52, y: 0), controlPoint2: CGPoint(x: 52, y: 0))
        blade10Path.addLine(to: CGPoint(x: 52, y: 0))
        blade10Path.close()
        darkAlpha03.setFill()
        blade10Path.fill()


        //// Blade11 Drawing
        let blade11Path = UIBezierPath()
        blade11Path.move(to: CGPoint(x: 45.03, y: -26))
        blade11Path.addLine(to: CGPoint(x: 45.03, y: -26))
        blade11Path.addLine(to: CGPoint(x: 45.03, y: -26))
        blade11Path.addLine(to: CGPoint(x: 45.16, y: -25.78))
        blade11Path.addCurve(to: CGPoint(x: 44.69, y: -20.46), controlPoint1: CGPoint(x: 46.14, y: -24.09), controlPoint2: CGPoint(x: 45.95, y: -21.96))
        blade11Path.addCurve(to: CGPoint(x: 41, y: -17.9), controlPoint1: CGPoint(x: 43.85, y: -19.55), controlPoint2: CGPoint(x: 42.9, y: -19))
        blade11Path.addLine(to: CGPoint(x: 29.9, y: -11.49))
        blade11Path.addCurve(to: CGPoint(x: 25.94, y: -9.58), controlPoint1: CGPoint(x: 27.92, y: -10.34), controlPoint2: CGPoint(x: 26.96, y: -9.79))
        blade11Path.addLine(to: CGPoint(x: 25.75, y: -9.53))
        blade11Path.addCurve(to: CGPoint(x: 20.91, y: -11.78), controlPoint1: CGPoint(x: 23.82, y: -9.19), controlPoint2: CGPoint(x: 21.89, y: -10.09))
        blade11Path.addCurve(to: CGPoint(x: 20.78, y: -12), controlPoint1: CGPoint(x: 20.78, y: -12), controlPoint2: CGPoint(x: 20.78, y: -12))
        blade11Path.addLine(to: CGPoint(x: 20.78, y: -12))
        blade11Path.addLine(to: CGPoint(x: 20.78, y: -12))
        blade11Path.addLine(to: CGPoint(x: 20.66, y: -12.22))
        blade11Path.addCurve(to: CGPoint(x: 21.13, y: -17.54), controlPoint1: CGPoint(x: 19.68, y: -13.91), controlPoint2: CGPoint(x: 19.87, y: -16.04))
        blade11Path.addCurve(to: CGPoint(x: 24.82, y: -20.1), controlPoint1: CGPoint(x: 21.96, y: -18.45), controlPoint2: CGPoint(x: 22.92, y: -19))
        blade11Path.addLine(to: CGPoint(x: 24.9, y: -20.15))
        blade11Path.addCurve(to: CGPoint(x: 39.88, y: -28.42), controlPoint1: CGPoint(x: 37.9, y: -27.66), controlPoint2: CGPoint(x: 38.85, y: -28.21))
        blade11Path.addLine(to: CGPoint(x: 40.07, y: -28.47))
        blade11Path.addCurve(to: CGPoint(x: 44.91, y: -26.22), controlPoint1: CGPoint(x: 42, y: -28.81), controlPoint2: CGPoint(x: 43.93, y: -27.91))
        blade11Path.addCurve(to: CGPoint(x: 45.03, y: -26), controlPoint1: CGPoint(x: 45.03, y: -26), controlPoint2: CGPoint(x: 45.03, y: -26))
        blade11Path.addLine(to: CGPoint(x: 45.03, y: -26))
        blade11Path.close()
        darkAlpha03.setFill()
        blade11Path.fill()


        //// Blade12 Drawing
        let blade12Path = UIBezierPath()
        blade12Path.move(to: CGPoint(x: 26, y: -45.03))
        blade12Path.addLine(to: CGPoint(x: 26, y: -45.03))
        blade12Path.addLine(to: CGPoint(x: 26, y: -45.03))
        blade12Path.addLine(to: CGPoint(x: 26.22, y: -44.91))
        blade12Path.addCurve(to: CGPoint(x: 28.47, y: -40.07), controlPoint1: CGPoint(x: 27.91, y: -43.93), controlPoint2: CGPoint(x: 28.81, y: -42))
        blade12Path.addCurve(to: CGPoint(x: 26.56, y: -36), controlPoint1: CGPoint(x: 28.21, y: -38.85), controlPoint2: CGPoint(x: 27.66, y: -37.9))
        blade12Path.addLine(to: CGPoint(x: 20.15, y: -24.9))
        blade12Path.addCurve(to: CGPoint(x: 17.67, y: -21.27), controlPoint1: CGPoint(x: 19, y: -22.92), controlPoint2: CGPoint(x: 18.45, y: -21.96))
        blade12Path.addLine(to: CGPoint(x: 17.54, y: -21.13))
        blade12Path.addCurve(to: CGPoint(x: 12.22, y: -20.66), controlPoint1: CGPoint(x: 16.04, y: -19.87), controlPoint2: CGPoint(x: 13.91, y: -19.68))
        blade12Path.addCurve(to: CGPoint(x: 12, y: -20.78), controlPoint1: CGPoint(x: 12, y: -20.78), controlPoint2: CGPoint(x: 12, y: -20.78))
        blade12Path.addLine(to: CGPoint(x: 12, y: -20.78))
        blade12Path.addLine(to: CGPoint(x: 12, y: -20.78))
        blade12Path.addLine(to: CGPoint(x: 11.78, y: -20.91))
        blade12Path.addCurve(to: CGPoint(x: 9.53, y: -25.75), controlPoint1: CGPoint(x: 10.09, y: -21.89), controlPoint2: CGPoint(x: 9.19, y: -23.82))
        blade12Path.addCurve(to: CGPoint(x: 11.44, y: -29.82), controlPoint1: CGPoint(x: 9.79, y: -26.96), controlPoint2: CGPoint(x: 10.34, y: -27.92))
        blade12Path.addLine(to: CGPoint(x: 11.49, y: -29.9))
        blade12Path.addCurve(to: CGPoint(x: 20.33, y: -44.55), controlPoint1: CGPoint(x: 19, y: -42.9), controlPoint2: CGPoint(x: 19.55, y: -43.85))
        blade12Path.addLine(to: CGPoint(x: 20.46, y: -44.69))
        blade12Path.addCurve(to: CGPoint(x: 25.78, y: -45.16), controlPoint1: CGPoint(x: 21.96, y: -45.95), controlPoint2: CGPoint(x: 24.09, y: -46.14))
        blade12Path.addCurve(to: CGPoint(x: 26, y: -45.03), controlPoint1: CGPoint(x: 26, y: -45.03), controlPoint2: CGPoint(x: 26, y: -45.03))
        blade12Path.addLine(to: CGPoint(x: 26, y: -45.03))
        blade12Path.close()
        darkAlpha03.setFill()
        blade12Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSuccessOutlined(frame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 25, y: frame.minY + 3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 3, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 12.86, y: frame.minY + 3), controlPoint2: CGPoint(x: frame.minX + 3, y: frame.minY + 12.86))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 47), controlPoint1: CGPoint(x: frame.minX + 3, y: frame.minY + 37.14), controlPoint2: CGPoint(x: frame.minX + 12.86, y: frame.minY + 47))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 47, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 37.14, y: frame.minY + 47), controlPoint2: CGPoint(x: frame.minX + 47, y: frame.minY + 37.14))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 3), controlPoint1: CGPoint(x: frame.minX + 47, y: frame.minY + 12.86), controlPoint2: CGPoint(x: frame.minX + 37.14, y: frame.minY + 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 25, y: frame.minY + 5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 45, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 36.06, y: frame.minY + 5), controlPoint2: CGPoint(x: frame.minX + 45, y: frame.minY + 13.94))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 45), controlPoint1: CGPoint(x: frame.minX + 45, y: frame.minY + 36.06), controlPoint2: CGPoint(x: frame.minX + 36.06, y: frame.minY + 45))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 5, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 13.94, y: frame.minY + 45), controlPoint2: CGPoint(x: frame.minX + 5, y: frame.minY + 36.06))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 5), controlPoint1: CGPoint(x: frame.minX + 5, y: frame.minY + 13.94), controlPoint2: CGPoint(x: frame.minX + 13.94, y: frame.minY + 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 34.99, y: frame.minY + 14.99))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 34.99, y: frame.minY + 14.99))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 34.17, y: frame.minY + 15.44), controlPoint1: CGPoint(x: frame.minX + 34.66, y: frame.minY + 14.99), controlPoint2: CGPoint(x: frame.minX + 34.35, y: frame.minY + 15.16))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 23.97, y: frame.minY + 30.48))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 16.68, y: frame.minY + 23.71))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 16.68, y: frame.minY + 23.71))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 15.27, y: frame.minY + 23.74), controlPoint1: CGPoint(x: frame.minX + 16.28, y: frame.minY + 23.33), controlPoint2: CGPoint(x: frame.minX + 15.65, y: frame.minY + 23.34))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 15.29, y: frame.minY + 25.15), controlPoint1: CGPoint(x: frame.minX + 14.88, y: frame.minY + 24.13), controlPoint2: CGPoint(x: frame.minX + 14.89, y: frame.minY + 24.77))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 15.32, y: frame.minY + 25.17), controlPoint1: CGPoint(x: frame.minX + 15.3, y: frame.minY + 25.16), controlPoint2: CGPoint(x: frame.minX + 15.31, y: frame.minY + 25.17))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 24.32, y: frame.minY + 33.53))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 35.83, y: frame.minY + 16.56))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 35.83, y: frame.minY + 16.56))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 35.58, y: frame.minY + 15.17), controlPoint1: CGPoint(x: frame.minX + 36.14, y: frame.minY + 16.11), controlPoint2: CGPoint(x: frame.minX + 36.03, y: frame.minY + 15.49))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 34.99, y: frame.minY + 14.99), controlPoint1: CGPoint(x: frame.minX + 35.41, y: frame.minY + 15.05), controlPoint2: CGPoint(x: frame.minX + 35.2, y: frame.minY + 14.98))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 34.99, y: frame.minY + 14.99))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawFailOutlined(frame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 25, y: frame.minY + 3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 3, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 12.86, y: frame.minY + 3), controlPoint2: CGPoint(x: frame.minX + 3, y: frame.minY + 12.86))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 47), controlPoint1: CGPoint(x: frame.minX + 3, y: frame.minY + 37.14), controlPoint2: CGPoint(x: frame.minX + 12.86, y: frame.minY + 47))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 47, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 37.14, y: frame.minY + 47), controlPoint2: CGPoint(x: frame.minX + 47, y: frame.minY + 37.14))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 3), controlPoint1: CGPoint(x: frame.minX + 47, y: frame.minY + 12.86), controlPoint2: CGPoint(x: frame.minX + 37.14, y: frame.minY + 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 25, y: frame.minY + 5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 45, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 36.06, y: frame.minY + 5), controlPoint2: CGPoint(x: frame.minX + 45, y: frame.minY + 13.94))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 45), controlPoint1: CGPoint(x: frame.minX + 45, y: frame.minY + 36.06), controlPoint2: CGPoint(x: frame.minX + 36.06, y: frame.minY + 45))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 5, y: frame.minY + 25), controlPoint1: CGPoint(x: frame.minX + 13.94, y: frame.minY + 45), controlPoint2: CGPoint(x: frame.minX + 5, y: frame.minY + 36.06))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.minY + 5), controlPoint1: CGPoint(x: frame.minX + 5, y: frame.minY + 13.94), controlPoint2: CGPoint(x: frame.minX + 13.94, y: frame.minY + 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 16.99, y: frame.minY + 15.99))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 16.99, y: frame.minY + 15.99))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 15.99, y: frame.minY + 16.99), controlPoint1: CGPoint(x: frame.minX + 16.44, y: frame.minY + 15.99), controlPoint2: CGPoint(x: frame.minX + 15.99, y: frame.minY + 16.44))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 16.3, y: frame.minY + 17.71), controlPoint1: CGPoint(x: frame.minX + 15.99, y: frame.minY + 17.26), controlPoint2: CGPoint(x: frame.minX + 16.1, y: frame.minY + 17.52))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 23.59, y: frame.minY + 25))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 16.29, y: frame.minY + 32.29))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 16.29, y: frame.minY + 32.29))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 16.27, y: frame.minY + 33.71), controlPoint1: CGPoint(x: frame.minX + 15.89, y: frame.minY + 32.68), controlPoint2: CGPoint(x: frame.minX + 15.88, y: frame.minY + 33.31))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 17.68, y: frame.minY + 33.73), controlPoint1: CGPoint(x: frame.minX + 16.65, y: frame.minY + 34.11), controlPoint2: CGPoint(x: frame.minX + 17.28, y: frame.minY + 34.12))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 17.71, y: frame.minY + 33.71), controlPoint1: CGPoint(x: frame.minX + 17.69, y: frame.minY + 33.73), controlPoint2: CGPoint(x: frame.minX + 17.7, y: frame.minY + 33.72))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 25, y: frame.minY + 26.41))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 32.29, y: frame.minY + 33.71))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 32.29, y: frame.minY + 33.71))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 33.71, y: frame.minY + 33.73), controlPoint1: CGPoint(x: frame.minX + 32.68, y: frame.minY + 34.11), controlPoint2: CGPoint(x: frame.minX + 33.31, y: frame.minY + 34.12))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 33.73, y: frame.minY + 32.32), controlPoint1: CGPoint(x: frame.minX + 34.11, y: frame.minY + 33.35), controlPoint2: CGPoint(x: frame.minX + 34.12, y: frame.minY + 32.72))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 33.71, y: frame.minY + 32.29), controlPoint1: CGPoint(x: frame.minX + 33.73, y: frame.minY + 32.31), controlPoint2: CGPoint(x: frame.minX + 33.72, y: frame.minY + 32.3))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 26.41, y: frame.minY + 25))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 33.71, y: frame.minY + 17.71))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 33.7, y: frame.minY + 17.71))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 33.73, y: frame.minY + 16.3), controlPoint1: CGPoint(x: frame.minX + 34.1, y: frame.minY + 17.33), controlPoint2: CGPoint(x: frame.minX + 34.11, y: frame.minY + 16.69))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 32.98, y: frame.minY + 15.99), controlPoint1: CGPoint(x: frame.minX + 33.53, y: frame.minY + 16.09), controlPoint2: CGPoint(x: frame.minX + 33.26, y: frame.minY + 15.98))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 32.98, y: frame.minY + 15.99))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 32.29, y: frame.minY + 16.3), controlPoint1: CGPoint(x: frame.minX + 32.72, y: frame.minY + 16), controlPoint2: CGPoint(x: frame.minX + 32.47, y: frame.minY + 16.11))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 25, y: frame.minY + 23.59))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 17.71, y: frame.minY + 16.29))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 17.71, y: frame.minY + 16.3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 16.99, y: frame.minY + 15.99), controlPoint1: CGPoint(x: frame.minX + 17.52, y: frame.minY + 16.1), controlPoint2: CGPoint(x: frame.minX + 17.26, y: frame.minY + 15.99))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawFailFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 25), controlPoint1: CGPoint(x: 12.87, y: 3), controlPoint2: CGPoint(x: 3, y: 12.87))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 47), controlPoint1: CGPoint(x: 3, y: 37.13), controlPoint2: CGPoint(x: 12.87, y: 47))
        bezierPath.addCurve(to: CGPoint(x: 47, y: 25), controlPoint1: CGPoint(x: 37.13, y: 47), controlPoint2: CGPoint(x: 47, y: 37.13))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 3), controlPoint1: CGPoint(x: 47, y: 12.87), controlPoint2: CGPoint(x: 37.13, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 33.71, y: 32.29))
        bezierPath.addCurve(to: CGPoint(x: 33.71, y: 33.71), controlPoint1: CGPoint(x: 34.1, y: 32.68), controlPoint2: CGPoint(x: 34.1, y: 33.32))
        bezierPath.addCurve(to: CGPoint(x: 33, y: 34), controlPoint1: CGPoint(x: 33.51, y: 33.9), controlPoint2: CGPoint(x: 33.26, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 32.29, y: 33.71), controlPoint1: CGPoint(x: 32.74, y: 34), controlPoint2: CGPoint(x: 32.49, y: 33.9))
        bezierPath.addLine(to: CGPoint(x: 25, y: 26.42))
        bezierPath.addLine(to: CGPoint(x: 17.71, y: 33.71))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 34), controlPoint1: CGPoint(x: 17.51, y: 33.9), controlPoint2: CGPoint(x: 17.26, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 16.29, y: 33.71), controlPoint1: CGPoint(x: 16.74, y: 34), controlPoint2: CGPoint(x: 16.49, y: 33.9))
        bezierPath.addCurve(to: CGPoint(x: 16.29, y: 32.29), controlPoint1: CGPoint(x: 15.9, y: 33.32), controlPoint2: CGPoint(x: 15.9, y: 32.68))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 25))
        bezierPath.addLine(to: CGPoint(x: 16.29, y: 17.71))
        bezierPath.addCurve(to: CGPoint(x: 16.29, y: 16.29), controlPoint1: CGPoint(x: 15.9, y: 17.32), controlPoint2: CGPoint(x: 15.9, y: 16.68))
        bezierPath.addCurve(to: CGPoint(x: 17.71, y: 16.29), controlPoint1: CGPoint(x: 16.68, y: 15.9), controlPoint2: CGPoint(x: 17.32, y: 15.9))
        bezierPath.addLine(to: CGPoint(x: 25, y: 23.58))
        bezierPath.addLine(to: CGPoint(x: 32.29, y: 16.29))
        bezierPath.addCurve(to: CGPoint(x: 33.71, y: 16.29), controlPoint1: CGPoint(x: 32.68, y: 15.9), controlPoint2: CGPoint(x: 33.32, y: 15.9))
        bezierPath.addCurve(to: CGPoint(x: 33.71, y: 17.71), controlPoint1: CGPoint(x: 34.1, y: 16.68), controlPoint2: CGPoint(x: 34.1, y: 17.32))
        bezierPath.addLine(to: CGPoint(x: 26.42, y: 25))
        bezierPath.addLine(to: CGPoint(x: 33.71, y: 32.29))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSuccessFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 25), controlPoint1: CGPoint(x: 12.87, y: 3), controlPoint2: CGPoint(x: 3, y: 12.87))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 47), controlPoint1: CGPoint(x: 3, y: 37.13), controlPoint2: CGPoint(x: 12.87, y: 47))
        bezierPath.addCurve(to: CGPoint(x: 47, y: 25), controlPoint1: CGPoint(x: 37.13, y: 47), controlPoint2: CGPoint(x: 47, y: 37.13))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 3), controlPoint1: CGPoint(x: 47, y: 12.87), controlPoint2: CGPoint(x: 37.13, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 35.83, y: 16.56))
        bezierPath.addLine(to: CGPoint(x: 24.32, y: 33.53))
        bezierPath.addLine(to: CGPoint(x: 15.32, y: 25.18))
        bezierPath.addCurve(to: CGPoint(x: 15.27, y: 23.76), controlPoint1: CGPoint(x: 14.92, y: 24.8), controlPoint2: CGPoint(x: 14.89, y: 24.17))
        bezierPath.addCurve(to: CGPoint(x: 16.68, y: 23.71), controlPoint1: CGPoint(x: 15.64, y: 23.36), controlPoint2: CGPoint(x: 16.28, y: 23.34))
        bezierPath.addLine(to: CGPoint(x: 23.97, y: 30.47))
        bezierPath.addLine(to: CGPoint(x: 34.17, y: 15.44))
        bezierPath.addCurve(to: CGPoint(x: 35.56, y: 15.17), controlPoint1: CGPoint(x: 34.48, y: 14.98), controlPoint2: CGPoint(x: 35.11, y: 14.86))
        bezierPath.addCurve(to: CGPoint(x: 35.83, y: 16.56), controlPoint1: CGPoint(x: 36.02, y: 15.48), controlPoint2: CGPoint(x: 36.14, y: 16.1))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfActivityIndicator(fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), rotationProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
            JAHubStyleKit.drawActivityIndicator(fillColor: fillColor, rotationProgress: rotationProgress)

        let imageOfActivityIndicator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfActivityIndicator
    }

    @objc dynamic public class func imageOfSuccessOutlined(imageSize: CGSize = CGSize(width: 50, height: 50), fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            JAHubStyleKit.drawSuccessOutlined(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), fillColor: fillColor)

        let imageOfSuccessOutlined = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSuccessOutlined
    }

    @objc dynamic public class func imageOfFailOutlined(imageSize: CGSize = CGSize(width: 50, height: 50), fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            JAHubStyleKit.drawFailOutlined(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), fillColor: fillColor)

        let imageOfFailOutlined = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFailOutlined
    }

    @objc dynamic public class func imageOfFailFilled(fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            JAHubStyleKit.drawFailFilled(fillColor: fillColor)

        let imageOfFailFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFailFilled
    }

    @objc dynamic public class func imageOfSuccessFilled(fillColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            JAHubStyleKit.drawSuccessFilled(fillColor: fillColor)

        let imageOfSuccessFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSuccessFilled
    }




    @objc(JAHubStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
